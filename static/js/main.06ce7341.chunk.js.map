{"version":3,"sources":["Form.js","Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","placeholder","name","Weather","description","city","country","error","temperature","weatherDescription","split","keyWords","i","length","includes","src","matchValues","App","useState","weather","setWeather","APIKEY","e","a","target","elements","value","preventDefault","fetch","then","res","json","data","apiData","sys","Math","round","main","temp","className","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gPAyBeA,G,MAvBF,SAACC,GACV,OAMI,0BAAMC,SAAUD,EAAME,YAClB,2BACAC,KAAK,OACLC,YAAY,OACZC,KAAK,SAEL,2BACAF,KAAK,OACLC,YAAY,UACZC,KAAK,YAEL,6CCgBGC,EAjCC,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,YAAaC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YAkBjD,OAKI,6BACKH,GAAQC,GAAW,2BAAID,EAAJ,KAAYC,GAC/BE,GAAe,2BAAIA,EAAJ,WACfJ,GAAe,2CAAiBA,GAChCG,GAAS,2BAAIA,GACbH,GArBT,WACA,GAAGA,EAGC,IAFA,IAAMK,EAAqBL,EAAYM,MAAM,KACvCC,EAAW,CAAC,SAAS,SAAU,QAAS,YACtCC,EAAI,EAAGA,EAAIH,EAAmBI,OAAQD,IAC1C,GAAGD,EAASG,SAASL,EAAmBG,IACpC,OAAO,yBAAKG,IAAI,yFAeJC,KC2BbC,MArDf,WAAe,MAEgBC,mBAAS,IAFzB,mBAENC,EAFM,KAEEC,EAFF,KAIPC,EAAS,mCAJF,4CAOb,WAAyBC,GAAzB,mBAAAC,EAAA,6DACQlB,EAAOiB,EAAEE,OAAOC,SAASpB,KAAKqB,MAC9BpB,EAAUgB,EAAEE,OAAOC,SAASnB,QAAQoB,MACxCJ,EAAEK,iBAHN,SAIwBC,MAAM,qDAAD,OAAsDvB,EAAtD,YAA8DC,EAA9D,kBAA+Ee,IACvGQ,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAK,SAAAG,GAAI,OAAIA,KANlB,OAIQC,EAJR,OASIb,EAFGf,GAAQC,EAEA,CACT0B,KAAMC,EACN5B,KAAM4B,EAAQ5B,KACdC,QAAS2B,EAAQC,IAAI5B,QACrBF,YAAa6B,EAAQd,QAAQ,GAAGf,YAChCI,YAAa2B,KAAKC,MAA0B,EAApBH,EAAQI,KAAKC,KAAS,EAAI,QAClD/B,MAAM,IAGK,CACTyB,KAAM,GACN3B,KAAM,GACNC,QAAS,GACTF,YAAa,GACbI,YAAa,GACbD,MAAM,mCAxBd,4CAPa,sBAoCb,OAEE,yBAAKgC,UAAU,OACb,2CACA,kBAAC,EAAD,CAAMxC,WAxCG,8CAyCT,kBAAC,EAAD,CACAM,KAAMc,EAAQd,KACdC,QAASa,EAAQb,QACjBF,YAAae,EAAQf,YACrBI,YAAaW,EAAQX,YACrBD,MAAOY,EAAQZ,QAEdiC,QAAQC,IAAItB,EAAQa,QCzCPU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.06ce7341.chunk.js","sourcesContent":["import React from 'react'\n\nconst Form = (props) => {\n    return (\n        \n        //create text inputs to query the city and country data\n        //recieve props of fetchdata from getweather\n        //submit button underneath\n\n        <form onSubmit={props.getWeather}>\n            <input\n            type='text'\n            placeholder='city'\n            name='city'\n            />\n            <input\n            type='text'\n            placeholder='country'\n            name='country'\n            />\n            <button>Submit</button>\n        </form>\n    )\n}\n\nexport default Form; ","import React from 'react'\n\n// destructure props from api call state\nconst Weather = ({description, city, country, error, temperature}) => {\n\n    //algorithm to match keywords with weather description\n    //weather descirption converts into an array of string to be \n    //iterated individually per each word\n    //return image if keywords are included\n\n    function matchValues () {\n    if(description) {\n        const weatherDescription = description.split(' ')\n        const keyWords = ['cloudy','clouds', 'cloud', 'overcast']\n        for(let i = 0; i < weatherDescription.length; i++) {\n            if(keyWords.includes(weatherDescription[i])) {\n                return <img src='https://media.freestocktextures.com/cache/74/8b/748ba3fe5976d8b03219a64851d2790d.jpg' />\n            }\n        }\n    }}\n\n    return (\n        //render city and country\n        //&& operator test true value for data input\n        //call the matchvalues algo\n\n        <div>\n            {city && country && <p>{city}, {country}</p>}\n            {temperature && <p>{temperature}  Â°F</p>}\n            {description && <p> Conditions: {description}</p>}\n            {error && <p>{error}</p>}\n            {description && matchValues()}\n        </div>\n    )\n}\n\nexport default Weather; ","import React,{useState} from 'react';\nimport './App.css';\nimport Form from './Form';\nimport Weather from './Weather';\n\nfunction App() {\n  //set up state and api key\n  const [weather,setWeather] = useState([])\n  //this api key is no longer working and has been removed as default \n  const APIKEY = '00517648ed782c3f434fed840bcfd50e'\n// async function fetch set state to api call and organize data\n\n  async function fetchData(e) {\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n      e.preventDefault()\n    const apiData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${APIKEY}`)\n      .then( res => res.json())\n      .then(data => data)\n      if(city && country) {\n        //error handling for input city and country\n      setWeather({\n        data: apiData,\n        city: apiData.city,\n        country: apiData.sys.country,\n        description: apiData.weather[0].description,\n        temperature: Math.round(apiData.main.temp * 9/5 - 459.67),\n        error:\"\"\n      }\n      )} else {\n        setWeather({\n          data: '',\n          city: '',\n          country: '',\n          description: '',\n          temperature: '',\n          error:\"Please Type A City And Country\"\n      }\n      )}\n  }\n\n  return (\n    //send props to form and weather and console weather data\n    <div className=\"App\">\n      <h3>WEATHER APP</h3>\n      <Form getWeather={fetchData} />\n      <Weather\n      city={weather.city}\n      country={weather.country}\n      description={weather.description}\n      temperature={weather.temperature}\n      error={weather.error}\n      />\n      {console.log(weather.data)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}